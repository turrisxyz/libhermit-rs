(function() {var implementors = {};
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for <a class=\"struct\" href=\"crossbeam_utils/atomic/struct.AtomicCell.html\" title=\"struct crossbeam_utils::atomic::AtomicCell\">AtomicCell</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_utils::atomic::atomic_cell::AtomicCell"]},{"text":"impl&lt;T&gt; From&lt;T&gt; for <a class=\"struct\" href=\"crossbeam_utils/struct.CachePadded.html\" title=\"struct crossbeam_utils::CachePadded\">CachePadded</a>&lt;T&gt;","synthetic":false,"types":["crossbeam_utils::cache_padded::CachePadded"]}];
implementors["cstr_core"] = [{"text":"impl From&lt;<a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>&gt; for Vec&lt;u8&gt;","synthetic":false,"types":["alloc::vec::Vec"]},{"text":"impl&lt;'a&gt; From&lt;Cow&lt;'a, <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;&gt; for <a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>","synthetic":false,"types":["cstr_core::CString"]},{"text":"impl From&lt;&amp;'_ <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt; for Box&lt;<a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::boxed::Box"]},{"text":"impl From&lt;Box&lt;<a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>, Global&gt;&gt; for <a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>","synthetic":false,"types":["cstr_core::CString"]},{"text":"impl From&lt;<a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>&gt; for Box&lt;<a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::boxed::Box"]},{"text":"impl&lt;'a&gt; From&lt;<a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>&gt; for Cow&lt;'a, <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::borrow::Cow"]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt; for Cow&lt;'a, <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::borrow::Cow"]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a <a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>&gt; for Cow&lt;'a, <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::borrow::Cow"]},{"text":"impl From&lt;<a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>&gt; for Arc&lt;<a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::sync::Arc"]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt; for Arc&lt;<a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::sync::Arc"]},{"text":"impl From&lt;<a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>&gt; for Rc&lt;<a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::rc::Rc"]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt; for Rc&lt;<a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt;","synthetic":false,"types":["alloc::rc::Rc"]},{"text":"impl From&lt;&amp;'_ <a class=\"struct\" href=\"cstr_core/struct.CStr.html\" title=\"struct cstr_core::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"cstr_core/struct.CString.html\" title=\"struct cstr_core::CString\">CString</a>","synthetic":false,"types":["cstr_core::CString"]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone + <a class=\"trait\" href=\"num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a>&gt; From&lt;T&gt; for <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;","synthetic":false,"types":["num_complex::Complex"]},{"text":"impl&lt;'a, T:&nbsp;Clone + <a class=\"trait\" href=\"num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a>&gt; From&lt;&amp;'a T&gt; for <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;","synthetic":false,"types":["num_complex::Complex"]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for <a class=\"struct\" href=\"num_rational/struct.Ratio.html\" title=\"struct num_rational::Ratio\">Ratio</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + <a class=\"trait\" href=\"num_integer/trait.Integer.html\" title=\"trait num_integer::Integer\">Integer</a>,&nbsp;</span>","synthetic":false,"types":["num_rational::Ratio"]},{"text":"impl&lt;T&gt; From&lt;(T, T)&gt; for <a class=\"struct\" href=\"num_rational/struct.Ratio.html\" title=\"struct num_rational::Ratio\">Ratio</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + <a class=\"trait\" href=\"num_integer/trait.Integer.html\" title=\"trait num_integer::Integer\">Integer</a>,&nbsp;</span>","synthetic":false,"types":["num_rational::Ratio"]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for <a class=\"struct\" href=\"once_cell/unsync/struct.OnceCell.html\" title=\"struct once_cell::unsync::OnceCell\">OnceCell</a>&lt;T&gt;","synthetic":false,"types":["once_cell::unsync::OnceCell"]}];
implementors["raw_cpuid"] = [{"text":"impl From&lt;u32&gt; for <a class=\"enum\" href=\"raw_cpuid/enum.ExtendedRegisterType.html\" title=\"enum raw_cpuid::ExtendedRegisterType\">ExtendedRegisterType</a>","synthetic":false,"types":["raw_cpuid::ExtendedRegisterType"]}];
implementors["siphasher"] = [{"text":"impl From&lt;u128&gt; for <a class=\"struct\" href=\"siphasher/sip128/struct.Hash128.html\" title=\"struct siphasher::sip128::Hash128\">Hash128</a>","synthetic":false,"types":["siphasher::sip128::Hash128"]},{"text":"impl From&lt;<a class=\"struct\" href=\"siphasher/sip128/struct.Hash128.html\" title=\"struct siphasher::sip128::Hash128\">Hash128</a>&gt; for u128","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl From&lt;<a class=\"struct\" href=\"time/error/struct.ComponentRange.html\" title=\"struct time::error::ComponentRange\">ComponentRange</a>&gt; for <a class=\"enum\" href=\"time/error/enum.Error.html\" title=\"enum time::error::Error\">Error</a>","synthetic":false,"types":["time::error::Error"]},{"text":"impl From&lt;<a class=\"struct\" href=\"time/error/struct.ConversionRange.html\" title=\"struct time::error::ConversionRange\">ConversionRange</a>&gt; for <a class=\"enum\" href=\"time/error/enum.Error.html\" title=\"enum time::error::Error\">Error</a>","synthetic":false,"types":["time::error::Error"]},{"text":"impl From&lt;<a class=\"struct\" href=\"time/error/struct.DifferentVariant.html\" title=\"struct time::error::DifferentVariant\">DifferentVariant</a>&gt; for <a class=\"enum\" href=\"time/error/enum.Error.html\" title=\"enum time::error::Error\">Error</a>","synthetic":false,"types":["time::error::Error"]},{"text":"impl From&lt;<a class=\"struct\" href=\"time/error/struct.InvalidVariant.html\" title=\"struct time::error::InvalidVariant\">InvalidVariant</a>&gt; for <a class=\"enum\" href=\"time/error/enum.Error.html\" title=\"enum time::error::Error\">Error</a>","synthetic":false,"types":["time::error::Error"]},{"text":"impl From&lt;<a class=\"enum\" href=\"time/enum.Month.html\" title=\"enum time::Month\">Month</a>&gt; for u8","synthetic":false,"types":[]}];
implementors["x86"] = [{"text":"impl From&lt;u32&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.PAddr.html\" title=\"struct x86::bits32::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits32::paging::PAddr"]},{"text":"impl From&lt;usize&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.PAddr.html\" title=\"struct x86::bits32::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits32::paging::PAddr"]},{"text":"impl From&lt;i32&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.PAddr.html\" title=\"struct x86::bits32::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits32::paging::PAddr"]},{"text":"impl From&lt;u32&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.IOAddr.html\" title=\"struct x86::bits32::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits32::paging::IOAddr"]},{"text":"impl From&lt;usize&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.IOAddr.html\" title=\"struct x86::bits32::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits32::paging::IOAddr"]},{"text":"impl From&lt;i32&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.IOAddr.html\" title=\"struct x86::bits32::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits32::paging::IOAddr"]},{"text":"impl From&lt;u32&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.VAddr.html\" title=\"struct x86::bits32::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits32::paging::VAddr"]},{"text":"impl From&lt;i32&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.VAddr.html\" title=\"struct x86::bits32::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits32::paging::VAddr"]},{"text":"impl From&lt;usize&gt; for <a class=\"struct\" href=\"x86/bits32/paging/struct.VAddr.html\" title=\"struct x86::bits32::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits32::paging::VAddr"]},{"text":"impl From&lt;u64&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.PAddr.html\" title=\"struct x86::bits64::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits64::paging::PAddr"]},{"text":"impl From&lt;usize&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.PAddr.html\" title=\"struct x86::bits64::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits64::paging::PAddr"]},{"text":"impl From&lt;i32&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.PAddr.html\" title=\"struct x86::bits64::paging::PAddr\">PAddr</a>","synthetic":false,"types":["x86::bits64::paging::PAddr"]},{"text":"impl From&lt;u64&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.IOAddr.html\" title=\"struct x86::bits64::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits64::paging::IOAddr"]},{"text":"impl From&lt;usize&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.IOAddr.html\" title=\"struct x86::bits64::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits64::paging::IOAddr"]},{"text":"impl From&lt;i32&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.IOAddr.html\" title=\"struct x86::bits64::paging::IOAddr\">IOAddr</a>","synthetic":false,"types":["x86::bits64::paging::IOAddr"]},{"text":"impl From&lt;u64&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.VAddr.html\" title=\"struct x86::bits64::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits64::paging::VAddr"]},{"text":"impl From&lt;i32&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.VAddr.html\" title=\"struct x86::bits64::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits64::paging::VAddr"]},{"text":"impl From&lt;usize&gt; for <a class=\"struct\" href=\"x86/bits64/paging/struct.VAddr.html\" title=\"struct x86::bits64::paging::VAddr\">VAddr</a>","synthetic":false,"types":["x86::bits64::paging::VAddr"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()